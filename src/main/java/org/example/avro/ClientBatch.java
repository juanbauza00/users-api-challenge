/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Esquema para procesar lotes de clientes de forma asíncrona */
@org.apache.avro.specific.AvroGenerated
public class ClientBatch extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4036180934435620467L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClientBatch\",\"namespace\":\"org.example.avro\",\"doc\":\"Esquema para procesar lotes de clientes de forma asíncrona\",\"fields\":[{\"name\":\"batchId\",\"type\":\"string\",\"doc\":\"Identificador único del lote para tracking\"},{\"name\":\"ownerId\",\"type\":\"long\",\"doc\":\"ID del owner que envía el lote\"},{\"name\":\"clients\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ClientData\",\"fields\":[{\"name\":\"nombre\",\"type\":\"string\",\"doc\":\"Nombre del cliente\"},{\"name\":\"apellido\",\"type\":\"string\",\"doc\":\"Apellido del cliente\"},{\"name\":\"fechaNacimiento\",\"type\":\"string\",\"doc\":\"Fecha de nacimiento en formato ISO (YYYY-MM-DD)\"}]}},\"doc\":\"Lista de clientes a procesar\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp de cuando se creó el lote (epoch millis)\"},{\"name\":\"totalClients\",\"type\":\"int\",\"doc\":\"Número total de clientes en el lote\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClientBatch> ENCODER =
      new BinaryMessageEncoder<ClientBatch>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClientBatch> DECODER =
      new BinaryMessageDecoder<ClientBatch>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClientBatch> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClientBatch> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClientBatch> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClientBatch>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClientBatch to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClientBatch from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClientBatch instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClientBatch fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identificador único del lote para tracking */
  private java.lang.CharSequence batchId;
  /** ID del owner que envía el lote */
  private long ownerId;
  /** Lista de clientes a procesar */
  private java.util.List<org.example.avro.ClientData> clients;
  /** Timestamp de cuando se creó el lote (epoch millis) */
  private long timestamp;
  /** Número total de clientes en el lote */
  private int totalClients;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClientBatch() {}

  /**
   * All-args constructor.
   * @param batchId Identificador único del lote para tracking
   * @param ownerId ID del owner que envía el lote
   * @param clients Lista de clientes a procesar
   * @param timestamp Timestamp de cuando se creó el lote (epoch millis)
   * @param totalClients Número total de clientes en el lote
   */
  public ClientBatch(java.lang.CharSequence batchId, java.lang.Long ownerId, java.util.List<org.example.avro.ClientData> clients, java.lang.Long timestamp, java.lang.Integer totalClients) {
    this.batchId = batchId;
    this.ownerId = ownerId;
    this.clients = clients;
    this.timestamp = timestamp;
    this.totalClients = totalClients;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return batchId;
    case 1: return ownerId;
    case 2: return clients;
    case 3: return timestamp;
    case 4: return totalClients;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: batchId = (java.lang.CharSequence)value$; break;
    case 1: ownerId = (java.lang.Long)value$; break;
    case 2: clients = (java.util.List<org.example.avro.ClientData>)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: totalClients = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'batchId' field.
   * @return Identificador único del lote para tracking
   */
  public java.lang.CharSequence getBatchId() {
    return batchId;
  }


  /**
   * Sets the value of the 'batchId' field.
   * Identificador único del lote para tracking
   * @param value the value to set.
   */
  public void setBatchId(java.lang.CharSequence value) {
    this.batchId = value;
  }

  /**
   * Gets the value of the 'ownerId' field.
   * @return ID del owner que envía el lote
   */
  public long getOwnerId() {
    return ownerId;
  }


  /**
   * Sets the value of the 'ownerId' field.
   * ID del owner que envía el lote
   * @param value the value to set.
   */
  public void setOwnerId(long value) {
    this.ownerId = value;
  }

  /**
   * Gets the value of the 'clients' field.
   * @return Lista de clientes a procesar
   */
  public java.util.List<org.example.avro.ClientData> getClients() {
    return clients;
  }


  /**
   * Sets the value of the 'clients' field.
   * Lista de clientes a procesar
   * @param value the value to set.
   */
  public void setClients(java.util.List<org.example.avro.ClientData> value) {
    this.clients = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp de cuando se creó el lote (epoch millis)
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp de cuando se creó el lote (epoch millis)
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'totalClients' field.
   * @return Número total de clientes en el lote
   */
  public int getTotalClients() {
    return totalClients;
  }


  /**
   * Sets the value of the 'totalClients' field.
   * Número total de clientes en el lote
   * @param value the value to set.
   */
  public void setTotalClients(int value) {
    this.totalClients = value;
  }

  /**
   * Creates a new ClientBatch RecordBuilder.
   * @return A new ClientBatch RecordBuilder
   */
  public static org.example.avro.ClientBatch.Builder newBuilder() {
    return new org.example.avro.ClientBatch.Builder();
  }

  /**
   * Creates a new ClientBatch RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClientBatch RecordBuilder
   */
  public static org.example.avro.ClientBatch.Builder newBuilder(org.example.avro.ClientBatch.Builder other) {
    if (other == null) {
      return new org.example.avro.ClientBatch.Builder();
    } else {
      return new org.example.avro.ClientBatch.Builder(other);
    }
  }

  /**
   * Creates a new ClientBatch RecordBuilder by copying an existing ClientBatch instance.
   * @param other The existing instance to copy.
   * @return A new ClientBatch RecordBuilder
   */
  public static org.example.avro.ClientBatch.Builder newBuilder(org.example.avro.ClientBatch other) {
    if (other == null) {
      return new org.example.avro.ClientBatch.Builder();
    } else {
      return new org.example.avro.ClientBatch.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClientBatch instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClientBatch>
    implements org.apache.avro.data.RecordBuilder<ClientBatch> {

    /** Identificador único del lote para tracking */
    private java.lang.CharSequence batchId;
    /** ID del owner que envía el lote */
    private long ownerId;
    /** Lista de clientes a procesar */
    private java.util.List<org.example.avro.ClientData> clients;
    /** Timestamp de cuando se creó el lote (epoch millis) */
    private long timestamp;
    /** Número total de clientes en el lote */
    private int totalClients;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.avro.ClientBatch.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.batchId)) {
        this.batchId = data().deepCopy(fields()[0].schema(), other.batchId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ownerId)) {
        this.ownerId = data().deepCopy(fields()[1].schema(), other.ownerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.clients)) {
        this.clients = data().deepCopy(fields()[2].schema(), other.clients);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalClients)) {
        this.totalClients = data().deepCopy(fields()[4].schema(), other.totalClients);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ClientBatch instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.avro.ClientBatch other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.batchId)) {
        this.batchId = data().deepCopy(fields()[0].schema(), other.batchId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ownerId)) {
        this.ownerId = data().deepCopy(fields()[1].schema(), other.ownerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.clients)) {
        this.clients = data().deepCopy(fields()[2].schema(), other.clients);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalClients)) {
        this.totalClients = data().deepCopy(fields()[4].schema(), other.totalClients);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'batchId' field.
      * Identificador único del lote para tracking
      * @return The value.
      */
    public java.lang.CharSequence getBatchId() {
      return batchId;
    }


    /**
      * Sets the value of the 'batchId' field.
      * Identificador único del lote para tracking
      * @param value The value of 'batchId'.
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder setBatchId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.batchId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'batchId' field has been set.
      * Identificador único del lote para tracking
      * @return True if the 'batchId' field has been set, false otherwise.
      */
    public boolean hasBatchId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'batchId' field.
      * Identificador único del lote para tracking
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder clearBatchId() {
      batchId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ownerId' field.
      * ID del owner que envía el lote
      * @return The value.
      */
    public long getOwnerId() {
      return ownerId;
    }


    /**
      * Sets the value of the 'ownerId' field.
      * ID del owner que envía el lote
      * @param value The value of 'ownerId'.
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder setOwnerId(long value) {
      validate(fields()[1], value);
      this.ownerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ownerId' field has been set.
      * ID del owner que envía el lote
      * @return True if the 'ownerId' field has been set, false otherwise.
      */
    public boolean hasOwnerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ownerId' field.
      * ID del owner que envía el lote
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder clearOwnerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'clients' field.
      * Lista de clientes a procesar
      * @return The value.
      */
    public java.util.List<org.example.avro.ClientData> getClients() {
      return clients;
    }


    /**
      * Sets the value of the 'clients' field.
      * Lista de clientes a procesar
      * @param value The value of 'clients'.
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder setClients(java.util.List<org.example.avro.ClientData> value) {
      validate(fields()[2], value);
      this.clients = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'clients' field has been set.
      * Lista de clientes a procesar
      * @return True if the 'clients' field has been set, false otherwise.
      */
    public boolean hasClients() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'clients' field.
      * Lista de clientes a procesar
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder clearClients() {
      clients = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp de cuando se creó el lote (epoch millis)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp de cuando se creó el lote (epoch millis)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp de cuando se creó el lote (epoch millis)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp de cuando se creó el lote (epoch millis)
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalClients' field.
      * Número total de clientes en el lote
      * @return The value.
      */
    public int getTotalClients() {
      return totalClients;
    }


    /**
      * Sets the value of the 'totalClients' field.
      * Número total de clientes en el lote
      * @param value The value of 'totalClients'.
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder setTotalClients(int value) {
      validate(fields()[4], value);
      this.totalClients = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalClients' field has been set.
      * Número total de clientes en el lote
      * @return True if the 'totalClients' field has been set, false otherwise.
      */
    public boolean hasTotalClients() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalClients' field.
      * Número total de clientes en el lote
      * @return This builder.
      */
    public org.example.avro.ClientBatch.Builder clearTotalClients() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClientBatch build() {
      try {
        ClientBatch record = new ClientBatch();
        record.batchId = fieldSetFlags()[0] ? this.batchId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ownerId = fieldSetFlags()[1] ? this.ownerId : (java.lang.Long) defaultValue(fields()[1]);
        record.clients = fieldSetFlags()[2] ? this.clients : (java.util.List<org.example.avro.ClientData>) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.totalClients = fieldSetFlags()[4] ? this.totalClients : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClientBatch>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClientBatch>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClientBatch>
    READER$ = (org.apache.avro.io.DatumReader<ClientBatch>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.batchId);

    out.writeLong(this.ownerId);

    long size0 = this.clients.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.example.avro.ClientData e0: this.clients) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeLong(this.timestamp);

    out.writeInt(this.totalClients);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.batchId = in.readString(this.batchId instanceof Utf8 ? (Utf8)this.batchId : null);

      this.ownerId = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<org.example.avro.ClientData> a0 = this.clients;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.example.avro.ClientData>((int)size0, SCHEMA$.getField("clients").schema());
        this.clients = a0;
      } else a0.clear();
      SpecificData.Array<org.example.avro.ClientData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.example.avro.ClientData>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.example.avro.ClientData e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.example.avro.ClientData();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.timestamp = in.readLong();

      this.totalClients = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.batchId = in.readString(this.batchId instanceof Utf8 ? (Utf8)this.batchId : null);
          break;

        case 1:
          this.ownerId = in.readLong();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<org.example.avro.ClientData> a0 = this.clients;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.example.avro.ClientData>((int)size0, SCHEMA$.getField("clients").schema());
            this.clients = a0;
          } else a0.clear();
          SpecificData.Array<org.example.avro.ClientData> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.example.avro.ClientData>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.example.avro.ClientData e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.example.avro.ClientData();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        case 4:
          this.totalClients = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










